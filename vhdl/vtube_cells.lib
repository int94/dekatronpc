library(vtube_cells_lib) {
  cell(BUF) {
    area: 0.5;
    pin(A) { direction: input; fanout_load: 1.0;}
    pin(Y) { direction: output;
              driver_type : pull_up;
               max_fanout : 10; 
              function: "A"; }
  }
  cell(NOT) {
    area: 0.5;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
              driver_type : pull_up;
               max_fanout : 10; 
              function: "A'"; }
  }
  cell(NAND2) {
    area: 1;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
             driver_type : pull_up;
               max_fanout : 10; 
             function: "(A*B)'"; }
  }
  cell(NAND3) {
    area: 1.5;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
            driver_type : pull_up;
               max_fanout : 10; 
             function: "(A*B*C)'"; }
  }
  cell(NAND4) {
    area: 2;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
            driver_type : pull_up;
               max_fanout : 10; 
             function: "(A*B*C*D)'"; }
  }
  cell(AND2) {
    area: 1;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
            driver_type : pull_up;
               max_fanout : 10; 
             function: "(A*B)"; }
  }
  cell(AND3) {
    area: 1.5;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A*B*C)"; }
  }
  cell(AND4) {
    area: 2;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A*B*C*D)"; }
  }
  cell(AOI21)
    area: 2;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
            driver_type : pull_up;
               max_fanout : 10; 
             function: "(A*B+C)'"; }
  }
  cell(AOI22)
    area: 2;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
            driver_type : pull_up;
               max_fanout : 10; 
             function: "(A*B+C*D)'"; }
  }
  cell(OR2) {
    area: 1;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A+B)"; }
  }  
  cell(OR3) {
    area: 1.5;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A+B+C)"; }
  }
  cell(OR4) {
    area: 2;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A+B+C+D)"; }
  }
  cell(OR5) {
    area: 2.5;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(D) { direction: input; fanout_load: 1.0; }    
    pin(E) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A+B+C+D+E)"; }
  }
  cell(NOR2) {
    area: 1;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A+B)'"; }
  }
  cell(NOR3) {
    area: 1.5;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A+B+C)'"; }
  }
  cell(NOR4) {
    area: 2;
    pin(A) { direction: input; fanout_load: 1.0; }
    pin(B) { direction: input; fanout_load: 1.0; }
    pin(C) { direction: input; fanout_load: 1.0; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Y) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
             function: "(A+B+C+D)'"; }
  }
  cell(LATCH) {
    area: 2.5;
    latch(IQ, IQN) { enable: C;
                  data_in: D; }
    pin(C) { direction: input; fanout_load: 1.0;
                 clock: true; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Q) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
              function: "IQ"; }
  }
  cell(DFF) {
    area: 3.5;
    ff(IQ, IQN) { clocked_on: C;
                  next_state: D; }
    pin(C) { direction: input; fanout_load: 1.0;
                 clock: true; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Q) { direction: output;
               max_fanout : 10; 
            driver_type : pull_up;
              function: "IQ"; }
  }
  cell(DFFSR) {
    area: 3.5;
    ff("IQ", "IQN") { clocked_on: C;
                  next_state: D;
                      preset: S;
                       clear: R; }
    pin(C) { direction: input; fanout_load: 1.0;
                 clock: true; }
    pin(D) { direction: input; fanout_load: 1.0; }
    pin(Q) { direction: output;
                max_fanout : 10; 
           driver_type : pull_up;
              function: "IQ"; }
    pin(S) { direction: input; fanout_load: 1.0; }
    pin(R) { direction: input; fanout_load: 1.0; }
  }
}
